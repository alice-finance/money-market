@startuml

class OperatorPortal {
    ~ delegators: address[]
    --
    <<modifier>> onlyOwner
    <<modifier>> onlyDelegator
    ..
    + addDelegator(address) onlyOwner: bool
    + removeDelegator(address) onlyOwner: bool
    + slash(address, uint256) onlyDelegator: bool
    + batchSlash(address[], uint256[]) onlyDelegator: bool
}

interface IExchangePriceSource {
    + getPrice(address, address, uint256): Price {abstract}
}

interface IPriceSource {
    + getPrice(address, uint256): uint256 {abstract}
    + getLastPrice(address): uint256 {abstract}
}

IPriceSource <.down. MoneyMarket: use

class OperatorPriceSource {
    ~ portal: OperatorPortal
    ~ exchange: IExchangePriceSource
    --
    <<modifier>> onlyOperator
    ..
    + postPrice(address, uint256, uint256) onlyOperator: bool
}

OperatorPriceSource -up-|> IPriceSource
OperatorPriceSource .left.> OperatorPortal : delegator
OperatorPriceSource ..> IExchangePriceSource : use

interface IAssetRegistry {
    + assets(): address[] {abstract}
    + isRegistered(address): bool {abstract}
}

IAssetRegistry <.down. MoneyMarket: use

class OperatorAssetRegistry {
    ~ portal: OperatorPortal
    --
    <<modifier>> onlyOperator
    ..
    + register(address) onlyOperator: bool
    + unregister(address) onlyOperator: bool
}

OperatorAssetRegistry -up-|> IAssetRegistry
OperatorAssetRegistry .> OperatorPortal: delegator

class LiquidationDelegator {
    ~ portal: OperatorPortal
    + moneyMarket: MoneyMarket
    --
    <<modifier>> onlyOperator
    ..
    + liquidate() onlyOperator: bool
}

LiquidationDelegator .down.> OperatorPortal: delegator

class MoneyMarket {
    ~ liquidator: address
    --
    <<modifier>> onlyLiquidator
    ..
    + liquidate(address, address, uint256) onlyLiquidator: bool
}

LiquidationDelegator .up.> MoneyMarket: liquidator

@enduml
